name: Deploy Functions (WIF)

on:
  push:
    branches: [ main ]
    paths:
      - 'firebase/functions/**'
      - 'firebase/firestore.rules'
      - 'firebase.json'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    environment: Production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Guard - no Firebase token allowed in WIF
        run: |
          if [ -n "${{ secrets.FIREBASE_TOKEN }}" ] || [ -n "${{ secrets.FIREBASE_CI_TOKEN }}" ]; then
            echo "Do not set Firebase token secrets in the WIF workflow."; exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Authenticate to Google Cloud (WIF)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          export_environment_variables: true

      # (recommended; some tools look for gcloud on PATH)
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Install Firebase CLI
        run: |
          npm i -g firebase-tools@latest
          firebase --version

      - name: Install & build Cloud Functions
        working-directory: firebase/functions
        run: |
          npm ci
          npm run build

      - name: Sanity check WIF & SA
        run: |
          set -euo pipefail
          echo "GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS"
          # SA must exist
          gcloud iam service-accounts describe "${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}" \
            --project akilipesa-prod --format='value(email)'
          # Must be able to mint a token with current ADC (WIF)
          gcloud auth print-access-token >/dev/null
          echo "WIF impersonation OK"

      # Seed Cloud Functions secrets (idempotent, non-interactive)
      - name: Seed CF secrets
        env:
          PROJECT_ID: ${{ vars.FIREBASE_PROJECT_ID }}
          AGORA_APP_ID: ${{ secrets.AGORA_APP_ID }}
          AGORA_APP_CERT: ${{ secrets.AGORA_APP_CERT }}
          RTC_PROVIDER: ${{ vars.RTC_PROVIDER }}
        run: |
          set -euo pipefail
          firebase --version

          printf '%s' "$AGORA_APP_ID"  | firebase functions:secrets:set AGORA_APP_ID  --project "$PROJECT_ID" --force
          printf '%s' "$AGORA_APP_CERT"| firebase functions:secrets:set AGORA_APP_CERT --project "$PROJECT_ID" --force
          printf '%s' "$RTC_PROVIDER"  | firebase functions:secrets:set RTC_PROVIDER  --project "$PROJECT_ID" --force

      - name: Deploy Functions + Firestore rules
        run: |
          firebase deploy \
            --only functions,firestore:rules \
            --project ${{ vars.FIREBASE_PROJECT_ID }} \
            --non-interactive
